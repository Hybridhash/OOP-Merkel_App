#pragma once
#include <iostream>
#include <vector>
#include "OrderBook.h"
#include "OrderBookEntry.h"
#include "Wallet.h"
#include "TradingBot.h"
#include "TradeCosting.h"
#include "MerkelLog.h"
#include <string>

class TradeEngine

{
    public:

        /**Constructor Function*/
        TradeEngine();
        
        /**Method to match and execute sales on user or bot input*/
        void appRefresh();
        /**for manual bid entry by the user in Merklerex App*/
        void enterBid();
        /**for manual ask entry by the user in Merklerex App*/
        void enterAsk();
        /**Going to the next time frame*/
        /**Used in both manual and bot trading*/
        void gotoNextTimeframe();
        /**Printing the value of the wallet at any given time*/
        void printWallet();
        /**Printing the cost of the exchange generated by the simulation*/
        void printBotCost();
        
        /**String to keep track of the current time*/
        std::string currentTime;

        //to check the possiblity of tarde before executing.
        void botTrading();


    private:

        /**To place the orders by bot using the orderbookentry*/
        void botOrderPlacement(double price, 
                            double amount,
                            std::string timestamp,
                            std::string product,
                            OrderBookType orderType);

        /**to automate ordering by bot using the price calculated under SMA/Linear Regression*/
        void orderProcessing(std::string product, double amount); 

        /**Creating a object of trade costing class*/
        tradeCosting tradeCosting;
        /**Creating a object of Trading bot class*/    
        TradingBot TradingBot;
        /**Creating a object of Wallet class*/      
        Wallet Wallet;
        /**Creating a object of Merkel Log class*/
        MerkelLog log;

};